#summary Generic makefile for CPC projects

= Makefile =
This makefile allows to build any project using cpcsdk tools.
Note it is still work in progress, so there are some rough edges.

{{{
# "generic" makefile
# Copyright 2011 PulkoMandy - Shinra!

# TODO
# * We need an output module that generates AMSDOS files (or hack that in the 
# vasm "bin" output module, which already does it for C64). This way, we don't
# have to use cpcfs to create the header, and we don't have to put it in the 
# command line. So we can make the commands generic with some xargs magic.
# This can be done with hideur maikeur in the meantime.
# * I usually do incbin "something.exo" in my sourcecode, but this doesn't get 
# in the makefile dependancies. Either add something equivalent to gcc -M in 
# vasm, or find another way... (grep INCBIN + generate dependencies ?)

# USER SETTINGS ################################################################

# Enter your demo name here
NAME:=TESTDEMO

# Main rule
# * $(NAME).dsk to build a dsk, or
# * emu to also run it in the emulator
ALL: $(NAME).dsk

# List the sourcefiles for your main code. This is currently statically linked
# at &300 and (hopefully) loaded there by the loader code.
# TODO use a target variable for the address, and get it from VASM/VLINK somehow
$(NAME).BIN:: main.o
$(NAME).BIN: START = 0x300

# List the dependancies for LOADER.BIN. Linked at &9000
LOADER.BIN: loader.o deexo.o
LOADER.BIN: START = 0x9000

# define screenmode for each picture
logo.scr: SCREENMODE = 1

# This adds logo.exo to the dependancies of loader.o. Assumes it will be
# INCBIN there...
loader.o:: logo.exo

# NOT YET GENERIC RULES ########################################################

BECHO = @echo -e "\x1B[7m\t$(1)\t\x1B[0m"

# Build the DSK-File (main rule)
# Maybe using :: rules would be better, but it prevents formatting the disk 
# everytime (since :: rules are unordered). Unless we set a FILECREATED variable
# on the file once it's created ?
$(NAME).dsk: $(NAME).BIN LOADER.BIN
	$(call BECHO, "Putting files in DSK...")
	cpcfs $@ f
	cpcfs $@ p $(NAME).BIN,0x300,0x300 -b -e
	cpcfs $@ p LOADER.BIN,0x9000,0x9000 -b -e
	
# TODO - move everything below to a generic cpc.mk file...
# GENERIC RULES ###############################################################

# Run the emulator
emu: $(NAME).dsk
	$(call BECHO,"Running caprice...")
	caprice -a $< &

# Link the sources ($^ means "all dependencies", so all of them should be .o 
# files - which is good, since anything else should be incbined somewhere)
%.BIN:
	$(call BECHO,"Linking $@")
	vlink -b rawbin1 -T rawlink.ld -Ttext $(START) -M -o $@ $^

# Assemble the sources
%.o: %.z80
	$(call BECHO,"Assembling $<...")
	vasmz80_oldstyle -Fvobj -o $@ $<

# Crunch a screen
%.exo: %.scr
	$(call BECHO,"Crunching $<...")
	exoraw -o $@ $<

# convert png to cpc screen format
# SCREENMODE can force the screenmode, otherwise it's guessed from the png 
# bitdepth
%.scr: %.png
	$(call BECHO,"Converting $<...")
	png2crtc $< $@ 7 $(SCREENMODE)

clean:
	$(call BECHO,"Cleaning...")
	rm *.exo *.BIN *.dsk *.o
}}}

= Linker =
The linker script for vlink :

{{{
SECTIONS
{
	.text : { *.o(*) }
}
}}}

This means "put everything from .o files in the .text section".

= Assembler =
some notes about vasm :
 * you have to put ORG 0 at the beginning of all your sourcefiles. The linker will remap them to the proper address. This ORG will not be needed anymore in a future release of vasm (I'm testing the patch right now)
 * By default symbols are local to a file. To export a symbol 'ASymbol' you have to do this in your sourcefile :
{{{
    GLOBAL ASymbol
}}}

= More TODOs =
 * Generate a SNA file and run aft so it's ready to be sent
 * Allow to run the emulator from the makefile